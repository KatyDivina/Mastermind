import os

from aiogram import types
from datetime import datetime
from pytz import timezone
from psycopg2 import connect
from random import shuffle

from settings import *


# POSTGRESQL





def now_time():
    updated_time = datetime.now(timezone("Europe/Moscow"))
    return updated_time.strftime("%Y-%m-%d %H:%M:%S")


def att_ending(attempts_counter, case="–†"):

    if attempts_counter % 10 == 1 and attempts_counter != 11:
        if case == "–†":  # –ï—Å–ª–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
            return "–ø–æ–ø—ã—Ç–∫—É"
        if case == "–ò":  # –ï—Å–ª–∏ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
            return "–ø–æ–ø—ã—Ç–∫a"
    elif attempts_counter % 10 in [2, 3, 4] and attempts_counter not in [12, 13, 14]:
        return "–ø–æ–ø—ã—Ç–∫–∏"
    else:
        return "–ø–æ–ø—ã—Ç–æ–∫"


class Player:

    class Game:
        def __init__(self):
            self.password = ""
            self.attempts_counter = 0
            self.id = None

    class Database:
        def __init__(self):
            self.user = os.getenv("PG_USER")
            self.password = os.getenv("PG_PASSWORD")
            self.host = os.getenv("PG_HOST")
            self.port = os.getenv("PG_PORT")
            self.database = os.getenv("PG_DATABASE")
            self.db = connect(user=self.user, password=self.password, host=self.host, port=self.port, database=self.database)
            self.cur = self.db.cursor()

        def get_best_score(self, id):
            self.cur.execute(f"""SELECT best_score FROM users WHERE user_id = {id};""")
            return self.cur.fetchone()[0]

        def get_player_from_dp(self, chat_id):
            self.cur.execute(f"""SELECT * FROM users WHERE user_id = {chat_id};""")
            return self.cur.fetchone()

        def add_player_in_db(self, chat):
            self.cur.execute(
                f"""INSERT INTO users VALUES
                    ({chat.id},
                    '{chat.first_name}',
                    '{chat.last_name}',
                    '{chat.username}',
                    '{now_time()}',
                    1000);"""
            )
            self.db.commit()

    def __init__(self, chat):
        self.db = Player.Database()
        if not self.get_player_from_dp(chat.id):
            self.add_player_in_db(chat)

        self.id = chat.id
        self.first_name = chat.first_name
        self.username = chat.username
        self.last_name = chat.last_name

        self.game = Player.Game()
        self.best_score = self.db.get_best_score()







    async def add_new_game_in_db(self, m):
        cur.execute(
            f"""INSERT INTO games(user_id, pass )
                     VALUES
                     ({self.id},
                     '{self.password}')
                     RETURNING game_id;"""
        )
        self.game.id = cur.fetchone()[0]
        db.commit()

    async def start_game(self, m):
        await self._passw_generator()



        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="rules"))

        await m.answer("üòà")
        await m.answer(
            f"üòà–•–ê-–•–ê-–•–ê! –Ø –∑–∞—Ö–≤–∞—Ç–∏–ª —Ç–≤–æ—é —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–º–µ–Ω—è–ª –ø–∞—Ä–æ–ª—å, —Ç–µ–±–µ –µ–≥–æ –Ω–∏ –∑–∞ —á—Ç–æ –Ω–µ —É–≥–∞–¥–∞—Ç—å!{LOCK}",
            reply_markup=keyboard,
        )

        await m.answer("üñ•–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

    async def _passw_generator(self):
        self.password = ""
        nums = list("0123456789")
        shuffle(nums)
        self.password = "".join(nums[:4])

        logging.info(
            f"{self.first_name} , {self.username}, {self.last_name} set password: {self.password}"
        )
        self.attempts_counter = 0

    async def hack_password(self, m):

        if self.game_id is None:  # –ï—Å–ª–∏ –±—ã–ª–∞ –∏–≥—Ä–∞ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            cur.execute(
                f"""SELECT game_id, pass
                            FROM games
                            WHERE user_id = {self.id}
                            AND games.end_game IS NULL
                            ORDER BY start_game DESC;"""
            )

            try:
                self.game_id, self.password = cur.fetchone()

                cur.execute(
                    f"""SELECT count(attempt_id) FROM attempts
                    WHERE game_id = {self.game_id};"""
                )

                self.attempts_counter = cur.fetchone()[0]

            except BaseException:

                await m.answer("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ /start")
                logging.info(f"message without game: {m.text}")
                return

        if not m.text.isdigit():
            await m.answer("üñ•–ü–∞—Ä–æ–ª—å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
            logging.info(
                f"{self.first_name} , {self.username}, {self.last_name} "
                f"try invalid pass, not digits only: {m.text}"
            )
            return
        if len(m.text) != 4:
            await m.answer("üñ•–í –ø–∞—Ä–æ–ª–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã")
            logging.info(
                f"{self.first_name} , {self.username}, {self.last_name} "
                f"try invalid pass, not 4 digits: {m.text}"
            )
            return
        if len(set(m.text)) != 4:
            await m.answer("üñ•–í –ø–∞—Ä–æ–ª–µ –≤—Å–µ —Ü–∏—Ñ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏")
            logging.info(
                f"{self.first_name} , {self.username}, {self.last_name} "
                f"try invalid pass, not unique nums: {m.text}"
            )
            return

        cur.execute(
            f"""INSERT INTO attempts (game_id, password, data) VALUES
                        ({self.game_id},
                        '{m.text}',
                        '{now_time()}');"""
        )
        db.commit()

        correct = 0
        wrong_place = 0
        incorrect = 0

        for i in range(4):
            if m.text[i] == self.password[i]:
                correct += 1
            elif m.text[i] not in self.password:
                incorrect += 1
            else:
                wrong_place += 1

        self.attempts_counter += 1
        await m.answer(
            f"{correct * str(CORRECT)}{wrong_place * WRONG_PLACE}{incorrect * INCORRECT}"
        )

        #    ---END GAME---
        if correct == 4:
            logging.info(
                f"{self.first_name} , {self.username}, {self.last_name}, "
                f"–ø–∞—Ä–æ–ª—å: {self.password}, "
                f"–ø–æ–ø—ã—Ç–æ–∫: {self.attempts_counter}"
            )

            # ---DATABASE---
            cur.execute(
                f"""UPDATE
                        games
                    SET
                        end_game = '{now_time()}',
                        attempts_counter = '{self.attempts_counter}'
                    WHERE
                        game_id = {self.game_id};"""
            )
            db.commit()

            self.game_id = None

            if self.attempts_counter < self.best_score:
                self.best_score = self.attempts_counter
                cur.execute(
                    f"""UPDATE
                            users
                        SET
                            best_score = {self.best_score}
                        WHERE
                            user_id = {self.id};"""
                )

                db.commit()

            buttons = [
                types.InlineKeyboardButton(text="–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game"),
                types.InlineKeyboardButton(
                    text="–¢–æ–ø 10 –º–æ–∏—Ö –∏–≥—Ä", callback_data="myBest"
                ),
                types.InlineKeyboardButton(
                    text="–¢–æ–ø 10 –ª—É—á—à–∏—Ö –∏–≥—Ä", callback_data="allBest"
                ),
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            await m.answer("üîê")
            await m.answer(
                f"{UNLOCK}–î–û–°–¢–£–ü –†–ê–ó–†–ï–®–Å–ù! "
                f"–ü–∞—Ä–æ–ª—å —É–≥–∞–¥–∞–Ω –∑–∞ {self.attempts_counter} {att_ending(self.attempts_counter)}!"
                f" –í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - {self.best_score} {att_ending(self.best_score, case='–ò')}",
                reply_markup=keyboard,
            )

    async def show_my_top(self, m):
        cur.execute(
            f"""SELECT attempts_counter, pass FROM games
            WHERE attempts_counter >0 AND user_id = {self.id}
            ORDER BY attempts_counter LIMIT 10;"""
        )

        # sorted_tuples = sorted(self.best_games.items(), key=lambda item: item[1])
        # best_games = {k: v for k, v in sorted_tuples}

        message = f"üèÜ TOP {self.first_name} üèÜ\n"

        i = 0
        for attempt, passw in cur.fetchall():
            message += f"{emoji[i]} {passw} - {attempt} {att_ending(attempt)}\n"
            i += 1

        if i == 0:
            message += "–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        await m.answer(message)

    async def show_best_top(self, m):

        cur.execute(
            f"""SELECT users.first_name, games.attempts_counter, games.pass, games.start_game, games.end_game
                FROM games INNER JOIN users
                ON games.user_id = users.user_id
                WHERE games.end_game IS NOT NULL
                ORDER BY attempts_counter
                LIMIT 10;"""
        )

        message = "üèÜ TOP üèÜ\n"

        i = 0
        for name, best_attempt, passw, start_game, end_game in cur.fetchall():
            time = end_game - start_game

            # TODO –í—Ä–µ–º—è —Å –Ω—É–ª—è–º–∏ –≤ –Ω–∞—á–∞–ª–µ
            # TODO –ü–æ–º–µ–Ω—è—Ç—å —á–∞—Å—ã –∏ –Ω–∏–∫–Ω–µ–π–º –º–µ—Å—Ç–∞–º–∏
            # TODO –£–¥–∞–ª–∏—Ç—å SQLITE

            message += f"{emoji[i]} {passw}  -  ‚è±{str(time)} | {best_attempt} {att_ending(best_attempt).ljust(9, ' ')} -  {name.ljust(12, ' ')}  \n"
            i += 1

        if i == 0:
            message += "–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        await m.answer(message)
